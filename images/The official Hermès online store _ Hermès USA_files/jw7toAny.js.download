/**
 * JW Player 7 to Anyplayer/Flow migration client-side code
 *
 * $Id$
 *
 * @package   Freecaster Engine
 * @author    Louis Geuten
 * @copyright (c) 2019 Freecaster SPRL
 */
window.jw7shim = true;

// Cover API differences between JW and standard HTMLVideoElement (target: flowplayer)
var _fcpr = _fcpr || [];
_fcpr.unshift(function(p) {
	// Legacy events and their standard counterparts
	var eventsMap  = {
		//Playback
		'play':         {
			event:   'play',
			warn:    false,
			adapter: function(e) {
				e.newstate = p.paused ? "paused" : "playing";
				e.oldstate = p.paused ? "playing" : "paused";
				e.viewable = true;
				return e;
			}
		},
		'paused':       {
			event:   'pause',
			adapter: function(e) {
				e.newstate = p.paused ? "paused" : "playing";
				e.oldstate = p.paused ? "playing" : "paused";
				e.viewable = true;
				return e;
			}
		},
		'time':         {
			event:   'timeupdate',
			adapter: function(e) {
				e.duration = p.duration;
				e.position = p.currentTime;
				e.viewable = true;
				return e;
			}
		},
		'buffer':       {
			event:   'waiting',
			adapter: function(e) {
				e.oldstate = "playing";
				e.newstate = "buffering";
				return e;
			}
		},
		'complete':     {
			event:   'ended',
			adapter: function(e) {
				return e;
			}
		},
		'idle':         {
			event:   'ended',
			adapter: function(e) {
				e.oldstate = 'playing';
				e.newstate = 'idle';
				return e;
			}
		},
		'seek':         {
			event:   'seeking',
			adapter: function(e) {
				e.position = p.currentTime;
				e.offset   = 0;
				return e;
			}
		},
		'volume':       {
			event:   'volumechange',
			adapter: function(e) {
				e.volume = p.volume;
				return e;
			}
		},
		'fullscreen':   {
			event:   ['fullscreenenter', 'fullscreenexit'],
			adapter: function(e, newEvent) {
				e.fullscreen = newEvent === 'fullscreenenter';
				return e;
			}
		},
		'playlistItem': {
			event:   ['loadstart', 'loadedmetadata'],
			preserve: true,
			adapter: function(e) {
				e.item        = p.currentConfig;
				e.currentItem = e.item;
				return e;
			}
		},

		// Quality
		'levels':            {
			event:   'qualities',
			adapter: function(e) {
				return e;
			}
		},
		'levelsChanged':     {
			event:   'quality:set',
			adapter: function(e) {
				return e;
			}
		},
		'visualQuality':     {
			event:   'quality:set',
			adapter: function(e) {
				return e;
			}
		},
		// Audio
		'audioTrackChanged': {
			event:   'audio:switch',
			adapter: function(e) {
				return e;
			}
		},
		'audioTracks':       {
			event:   'audio:tracks',
			adapter: function(e) {
				return e;
			}
		},
		// Metadata
		'meta':              {
			event:   'loadedmetadata',
			adapter: function(e) {
				return e;
			}
		},
		'firstframe':        {
			event:   'loadstart',
			adapter: function(e) {
				return e;
			}
		},
	};
	var methodsMap = {
		// Playback
		'seek':                 function(t) {
			p.currentTime = t;
		},
		'getPosition':          function() {
			return p.currentTime;
		},
		'getDuration':          function() {
			return p.duration;
		},
		'getConfig':            function() {
			return p.config;
		},
		'getContainer':         function() {
			return p.parentElement;
		},
		//Volume
		'getVolume':            function() {
			return p.volume;
		},
		'setVolume':            function(v) {
			p.volume = v;
		},
		'getMute':              function() {
			return p.muted;
		},
		'setMute':              function(m) {
			m !== undefined ? (p.muted = m) : (p.muted = !p.muted);
		},
		//Size
		'getFullscreen':        function() {
			return p.in_fullscreen
		}, // FLOW
		'getHeight':            function() {
			return p.height;
		},
		'getWidth':             function() {
			return p.width
		},
		'resize':               function(w, h) {
			p.width  = w;
			p.height = h;
		},
		'getPlaylistItem':      function(){
			return p.currentConfig;
		},
		//Quality
		'getQualityLevels':     null,
		'getCurrentQuality':    null,
		'getVisualQuality':     null,
		'setCurrentQuality':    null,
		// Audio
		'getAudioTracks':       function() {
			return p.asel.tracks
		}, // FLOW, map?
		'getCurrentAudioTrack': function() {
			return p.asel.get()
		},
		'setCurrentAudioTrack': function(a) {
			return p.asel.set(a);
		},
		// Captions
		'setCaptions':          null,
		'getCaptionsList':      null,
		'getCurrentCaptions':   null,
		'setCurrentCaptions':   null,
		// Controls
		'getControls':          function() {
			return p.controls;
		},
		'setControls':          function(c) {
			p.controls = c;
		},
		'getSafeRegion':        null,
		'addButton':            function(icon, label, handler, id) {
			anyp.insertIcon(icon, label, handler, id);
		},
		'removeButton':         null
		// Ads...
	};

	function warn(msg, caller_line)
	{
		if (window.console)
		{
			if (typeof caller_line == "undefined")
			{
				try
				{
					caller_line = (new Error).stack.split("\n");
					caller_line = "\n" + caller_line.slice(3, 4).join("\n");
				}
				catch (e)
				{
					caller_line = null;
				}
			}
			else if (caller_line === false)
			{
				caller_line = "";
			}
			console.warn("[FCPlayer] " + msg, caller_line);
		}
	}

	function mapEvent(event, callback)
	{

		// legacy events may map to multiple new ones
		var eventMapper = eventsMap[event];
		var mapping     = eventMapper.event;
		var adapter     = eventMapper.adapter;

		if (eventMapper.warn !== false)
			warn('"' + event + '" event is deprecated!');


		if (Array.isArray(mapping))
		{
			mapping = mapping.join(' ');
		}


		listener.apply(p, [
			               mapping,
			               mapCallback(event, adapter, callback, mapping, eventMapper.warn)
		                 ]
		);

		return eventMapper.preserve
	}

	function mapCallback(event, adapter, callback, newEvent, warnEvent)
	{
		return function(e) {
			if (warnEvent !== false)
			{
				warn('Old "' + event + '" event is deprecated, use ' + newEvent + ' instead!');
			}

			e = adapter(e, newEvent);

			callback.apply(this, [e]);
		}
	}

	var listener = p.on;

	// Intercept the legacy listeners, warn and map to new events
	p.on = function(event, callback) {
		var list = event;
		if (!Array.isArray(event))
		{
			list = event.split(' ');
		}

		event    = [];

		for (var i = 0; i < list.length; i++)
		{
			var preserve = true;
			if (eventsMap.hasOwnProperty(list[i]))
			{
				preserve = mapEvent(list[i], callback);
			}

			if (preserve)
			{
				// Passthrough events by default, and special one
				event[event.length] = list[i];
			}
		}

		if (event.length === 0)
		{
			return p;
		}

		arguments[0] = event.join(' ');
		return listener.apply(p, arguments);
	};


	// Handle legacy methods
	for (var method in methodsMap)
	{
		if (methodsMap.hasOwnProperty(method))
		{
			mapMethod(method, methodsMap[method]);
		}
	}

	function mapMethod(method, func)
	{
		p[method] = function() {
			warn(method + ' method is deprecated!');
			return func.apply(p, arguments);
		}
	}

});
